//=============================================================================
//
// パーティクル処理 [particle.cpp]
// Author : 樋宮 匠
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "particle.h"
#include "manager.h"
#include "object.h"

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************
LPDIRECT3DTEXTURE9 CParticle::m_pTexture = NULL;

//=============================================================================
// コンストラクタ
//=============================================================================
CParticle::CParticle()
{
	// メンバ変数
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);		// パーティクルの移動量
	m_nLife = PARTICLE_LIFE;
}

//=============================================================================
// デストラクタ
//=============================================================================
CParticle::~CParticle()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CParticle::Init(D3DXVECTOR3 pos)
{
	// 初期化
	CPolygon3D::Init();

	m_nLife = PARTICLE_LIFE;

	m_pos = pos;
	SetPos(pos);
	SetSize(7.0f, 7.0f);
	SetCol(D3DCOLOR_RGBA(241, 137, 41, 255));

	m_move = D3DXVECTOR3(cos(GetRandom(-180, 180)) * PARTICLE_MOVE / 2, sin(GetRandom(0, 180)) * PARTICLE_MOVE * 3, 0.0f);

	// テクスチャの作成
	BindTexture(m_pTexture);
	SetTexUV(0.0f, 1.0f, 0.0f, 1.0f);

	return S_OK;
}

//=============================================================================
// 更新処理
//=============================================================================
void CParticle::Update()
{
	m_pos += m_move;

	SetPos(m_pos);

	m_nLife--;
	m_move.y -= 0.5f;

	if (m_nLife <= 0)
	{
		Uninit();
	}
	else
	{
		CPolygon3D::Update();
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CParticle::Draw()
{
	CPolygon3D::Draw();
}

//=============================================================================
// 終了処理
//=============================================================================
void CParticle::Uninit()
{
	CPolygon3D::Uninit();
}

//=============================================================================
// テクスチャ読み込み処理
//=============================================================================
HRESULT CParticle::Load(void)
{
	D3DXCreateTextureFromFile(CManager::GetRenderer()->GetDevice(), "./data/TEXTURE/Bullet.png", &m_pTexture);

	return S_OK;
}

//=============================================================================
// テクスチャ破棄処理
//=============================================================================
void CParticle::Unload(void)
{
}

//=============================================================================
// インスタンス生成処理
//=============================================================================
CParticle * CParticle::Create(D3DXVECTOR3 pos)
{
	CParticle *pParticle;
	pParticle = new CParticle;
	pParticle->SetObjType(OBJ_TYPE_EFFECT);
	pParticle->Init(pos);

	return pParticle;
}

//=============================================================================
// パーティクル生成処理
//=============================================================================
void CParticle::SetParticle(D3DXVECTOR3 pos)
{
	for (int nCount = 0; nCount < PARTICLE_NUM; nCount++)
	{
		Create(pos);
	}
}