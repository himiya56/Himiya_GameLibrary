//=============================================================================
//
// ポリゴン処理 [object.cpp]
// Author : 樋宮 匠
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "object.h"

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************
CObject * CObject::m_apObject[MAX_POLYGON] = {};
int CObject::m_nNumAll = 0;

//=============================================================================
// コンストラクタ
//=============================================================================
CObject::CObject()
{
	for (int nCount = 0; nCount < MAX_POLYGON; nCount++)
	{
		if (m_apObject[nCount] == NULL)
		{
			// メモリの確保
			m_apObject[nCount] = this;
			m_nNumIndex = nCount;
			m_nNumAll++;
			break;
		}
	}
}

//=============================================================================
// デストラクタ
//=============================================================================
CObject::~CObject()
{
}

//=============================================================================
// 全更新処理
//=============================================================================
void CObject::UpdateAll(void)
{
	for (int nCount = 0; nCount < MAX_POLYGON; nCount++)
	{
		if (m_apObject[nCount] != NULL)
		{
			m_apObject[nCount]->Update();
		}
	}
}

//=============================================================================
// 全描画処理
//=============================================================================
void CObject::DrawAll(void)
{
	for (int nCount = 0; nCount < MAX_POLYGON; nCount++)
	{
		if (m_apObject[nCount] != NULL)
		{
			m_apObject[nCount]->Draw();
		}
	}
}

//=============================================================================
// 全オブジェクト破棄処理
//=============================================================================
void CObject::ReleaseAll(void)
{
	for (int nCount = 0; nCount < MAX_POLYGON; nCount++)
	{
		if (m_apObject[nCount] != NULL)
		{
			m_apObject[nCount]->Uninit();
		}
	}
}

//=============================================================================
// オブジェクトタイプ設定処理
//=============================================================================
void CObject::SetObjType(const OBJ_TYPE type)
{
	m_Type = type;
}

//=============================================================================
// オブジェクトタイプ取得処理
//=============================================================================
CObject::OBJ_TYPE CObject::GetObjType(void)
{
	return m_Type;
}

//=============================================================================
// オブジェクト取得処理
//=============================================================================
CObject * CObject::GetObj(int nIndex)
{
	return m_apObject[nIndex];
}

//=============================================================================
// オブジェクト破棄処理
//=============================================================================
void CObject::Release(void)
{
	// メンバ変数を保持
	int nNum = m_nNumIndex;
	// メモリの破棄
	delete m_apObject[nNum];
	m_apObject[nNum] = NULL;
	m_nNumAll--;
}