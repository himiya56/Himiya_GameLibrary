//=============================================================================
//
// ボス処理 [boss.cpp]
// Author : 樋宮 匠
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "boss.h"
#include "map.h"
#include "manager.h"

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************
LPDIRECT3DTEXTURE9 CBoss::m_pTexture = NULL;
D3DXVECTOR3 CBoss::m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
D3DXVECTOR3 CBoss::m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
int CBoss::m_nLife = BOSS_LIFE;

//=============================================================================
// コンストラクタ
//=============================================================================
CBoss::CBoss()
{
	// メンバ変数
	m_pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	m_nLife = BOSS_LIFE;
	m_fTex = 1.0f / BOSS_ANIM_KEY;
	m_nAnimCount = 0;
}

//=============================================================================
// デストラクタ
//=============================================================================
CBoss::~CBoss()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CBoss::Init(D3DXVECTOR3 pos)
{
	CPolygon3D::Init();

	m_pos = pos;
	SetPos(m_pos);

	SetSize(POLYGON_SIZE * BOSS_HEIGHT, MAP_WIDTH * POLYGON_SIZE);
	// テクスチャの作成
	BindTexture(m_pTexture);
	SetTexUV(0.0f, m_fTex, 0.0f, 1.0f);

	m_nLife = BOSS_LIFE;

	return S_OK;
}

//=============================================================================
// 更新処理
//=============================================================================
void CBoss::Update()
{
	m_pos.y--;
	m_nAnimCount++;

	if (m_nAnimCount >= BOSS_ANIM_SPEED)
	{
		m_fTex += 1.0f / BOSS_ANIM_KEY;
		m_nAnimCount = 0;

		if (m_fTex >= 1.0f)
		{
			m_fTex = 1.0f / BOSS_ANIM_KEY;
		}
	}

	SetTexUV(m_fTex, m_fTex + 1.0f / BOSS_ANIM_KEY, 0.0f, 1.0f);

	SetPos(m_pos);

	CPolygon3D::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CBoss::Draw()
{
	CPolygon3D::Draw();
}

//=============================================================================
// 終了処理
//=============================================================================
void CBoss::Uninit()
{
	CPolygon3D::Uninit();
}

//=============================================================================
// テクスチャ読み込み処理
//=============================================================================
HRESULT CBoss::Load(void)
{
	D3DXCreateTextureFromFile(CManager::GetRenderer()->GetDevice(), "./data/TEXTURE/Boss_Anim.png", &m_pTexture);

	return S_OK;
}

//=============================================================================
// テクスチャ破棄処理
//=============================================================================
void CBoss::Unload(void)
{
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// インスタンス生成処理
//=============================================================================
CBoss * CBoss::Create(D3DXVECTOR3 pos)
{
	CBoss *pBoss;
	pBoss = new CBoss;
	pBoss->SetObjType(OBJ_TYPE_BOSS);
	pBoss->Init(pos);
	return pBoss;
}

//=============================================================================
// ダメージ処理
//=============================================================================
void CBoss::Damage(void)
{
	m_nLife--;
}
