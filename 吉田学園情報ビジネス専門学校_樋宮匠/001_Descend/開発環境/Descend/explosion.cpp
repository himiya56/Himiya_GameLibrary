//=============================================================================
//
// 弾処理 [explosion.cpp]
// Author : 樋宮 匠
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "explosion.h"
#include "manager.h"

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************
LPDIRECT3DTEXTURE9 CExplosion::m_pTexture = NULL;

//=============================================================================
// コンストラクタ
//=============================================================================
CExplosion::CExplosion()
{
	// メンバ変数
	m_nCountAnim = 0;
}

//=============================================================================
// デストラクタ
//=============================================================================
CExplosion::~CExplosion()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CExplosion::Init(D3DXVECTOR3 pos)
{
	// 初期化
	CPolygon3D::Init();

	SetPos(pos);

	// テクスチャの作成
	BindTexture(m_pTexture);
	SetTexUV(0.0f, 1.0f / EXPLOSION_SEG_X, 0.0f, 1.0f);

	return S_OK;
}

//=============================================================================
// 更新処理
//=============================================================================
void CExplosion::Update()
{
	float fTexX; 
	GetTexUV(NULL, &fTexX, NULL, NULL);

	CPolygon3D::Update();

	// アニメーション情報を変更
	m_nCountAnim++;
	if (m_nCountAnim > ANIM_SPEED)
	{
		fTexX += 1.0f / EXPLOSION_SEG_X;
		m_nCountAnim = 0;
		if (fTexX > 1.0f)
		{
			Uninit();
		}
		else
		{
			// 爆発の情報を更新
			SetTexUV(fTexX - 1.0f / EXPLOSION_SEG_X, fTexX, 0.0f, 1.0f);
		}
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CExplosion::Draw()
{
	CPolygon3D::Draw();
}

//=============================================================================
// コンストラクタ
//=============================================================================
void CExplosion::Uninit()
{
	CPolygon3D::Uninit();
}

//=============================================================================
// テクスチャ読み込み処理
//=============================================================================
HRESULT CExplosion::Load(void)
{
	D3DXCreateTextureFromFile(CManager::GetRenderer()->GetDevice(), "./data/TEXTURE/explosion000.png", &m_pTexture);

	return S_OK;
}

//=============================================================================
// テクスチャ破棄処理
//=============================================================================
void CExplosion::Unload(void)
{
	if (m_pTexture != NULL)
	{
		m_pTexture->Release();
		m_pTexture = NULL;
	}
}

//=============================================================================
// インスタンス生成処理
//=============================================================================
CExplosion * CExplosion::Create(D3DXVECTOR3 pos)
{
	CExplosion *pExplosion;
	pExplosion = new CExplosion;
	pExplosion->Init(pos);
	pExplosion->SetObjType(OBJ_TYPE_EXPLOSION);
	return pExplosion;
}
